{"version":3,"file":"component---src-pages-index-js-5a0c9815c40030543bfd.js","mappings":"6LAIA,MAAMA,EAASC,IAAA,IAAC,UAAEC,GAAWD,EAAA,OAC3BE,EAAAA,cAAA,UAAQC,GAAG,aACTD,EAAAA,cAAA,MAAIE,MAAO,CAAEC,OAAQ,IACnBH,EAAAA,cAACI,EAAAA,KAAI,CAACC,GAAG,KAAKN,IAET,EAOXF,EAAOS,aAAe,CACpBP,UAAU,IAGZ,QCiBA,MAvBeD,IAAmB,IAAlB,SAAES,GAAUT,EAC1B,MAAMU,GAAOC,EAAAA,EAAAA,gBAAe,cAU5B,OACET,EAAAA,cAAA,OAAKC,GAAG,cACND,EAAAA,cAACH,EAAM,CAACE,UAAWS,EAAKE,KAAKC,aAAaC,QAC1CZ,EAAAA,cAAA,YAAOO,GACH,C,+CClBV,SAASM,EAAGf,GAAsC,IAArC,YAAEgB,EAAW,KAAEC,EAAI,KAAEC,EAAI,MAAEJ,GAAOd,EAC7C,MAAM,KAAEY,IAASD,EAAAA,EAAAA,gBAAe,YAc1BQ,EAAkBH,GAAeJ,EAAKC,aAAaG,YAEzD,OACEd,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQY,GACRZ,EAAAA,cAAA,QAAMkB,KAAK,cAAcC,QAASF,IAClCjB,EAAAA,cAAA,QAAMoB,SAAS,WAAWD,QAASP,IACnCZ,EAAAA,cAAA,QAAMoB,SAAS,iBAAiBD,QAASF,IACzCjB,EAAAA,cAAA,QAAMoB,SAAS,UAAUD,QAAQ,YACjCnB,EAAAA,cAAA,QAAMkB,KAAK,eAAeC,QAAQ,YAClCnB,EAAAA,cAAA,QAAMkB,KAAK,kBAAkBC,QAAO,KACpCnB,EAAAA,cAAA,QAAMkB,KAAK,gBAAgBC,QAASP,IACpCZ,EAAAA,cAAA,QAAMkB,KAAK,sBAAsBC,QAASF,IAGhD,CAEAJ,EAAIP,aAAe,CACjBS,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,K,6GClDA,MAuDaO,EAAOA,IAAMrB,EAAAA,cAACa,EAAAA,EAAG,CAACD,MAAM,SAErC,UAzDkBd,IAAe,IAAd,KAAEU,GAAMV,EACzB,MACEwB,mBAAqBC,MAAOC,IAC1BhB,EAEEiB,EAAgBD,EAAME,QAAOC,IACzBA,EAAKC,KAAKC,YAAYC,iBAGhC,OACE9B,EAAAA,cAAC+B,EAAAA,EAAM,KACL/B,EAAAA,cAAA,UAAI,WACJA,EAAAA,cAAA,SAAG,sDACHA,EAAAA,cAAA,SAAG,+EAIFyB,EAAcO,KACbC,IAKO,IAJLL,MACEM,QAAQ,KAAEC,GACVN,aAAa,KAAEO,EAAI,MAAExB,KAExBqB,EACC,OACEjC,EAAAA,cAAA,MAAIqC,IAAKF,GACPnC,EAAAA,cAACI,EAAAA,KAAI,CAACC,GAAI8B,GAAUC,EAAI,KAAKxB,GAC1B,IAIJ,C","sources":["webpack://gatsby-starter-default/./src/components/header.js","webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/seo.js","webpack://gatsby-starter-default/./src/pages/index.js"],"sourcesContent":["import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header id=\"SiteTitle\">\n    <h1 style={{ margin: 0 }}>\n      <Link to=\"/\">{siteTitle}</Link>\n    </h1>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <div id=\"MainLayout\">\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <main>{children}</main>\n    </div>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <>\n      <title>{title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n    </>\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst IndexPage = ({ data }) => {\n  const {\n    allMarkdownRemark: { edges: posts },\n  } = data\n\n  const filteredPosts = posts.filter(post => {\n    return !post.node.frontmatter.disablePublish;\n  });\n\n  return (\n    <Layout>\n      <h1>Welcome</h1>\n      <p>Website is still under development. Slow progress.</p>\n      <p>\n        I'll be focusing more on writing content, and finishing my current\n        project.\n      </p>\n      {filteredPosts.map(\n        ({\n          node: {\n            fields: { slug },\n            frontmatter: { date, title },\n          },\n        }) => {\n          return (\n            <ul key={slug}>\n              <Link to={slug}>{`${date}: ${title}`}</Link>\n            </ul>\n          )\n        }\n      )}\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(filter: { fields: { isDraft: { eq: false } } }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date\n            disablePublish\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const Head = () => <SEO title=\"Home\" />\n\nexport default IndexPage\n"],"names":["Header","_ref","siteTitle","React","id","style","margin","Link","to","defaultProps","children","data","useStaticQuery","site","siteMetadata","title","SEO","description","lang","meta","metaDescription","name","content","property","Head","allMarkdownRemark","edges","posts","filteredPosts","filter","post","node","frontmatter","disablePublish","Layout","map","_ref2","fields","slug","date","key"],"sourceRoot":""}