{"componentChunkName":"component---src-templates-blog-entry-template-js","path":"/entry/how-to-xrandr/","result":{"data":{"markdownRemark":{"html":"<p><strong><em>Note</em></strong>: This is not really <em>linux</em> per se, but rather, any DE that uses xrandr. Thus, this is less applicable to Wayland. My experience also mostly revolves around GNOME, and this will cover things that are specific to GNOME as well.</p>\n<h1>TLDR</h1>\n<p>If you have a dual 4k monitor and have a screen rotated to portrait mode, and want a fractional scaling of 1.5, this script may be useful to you:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gsettings <span class=\"token builtin class-name\">set</span> org.gnome.desktop.interface scaling-factor <span class=\"token number\">2</span>\ngsettings <span class=\"token builtin class-name\">set</span> org.gnome.settings-daemon.plugins.xsettings overrides <span class=\"token string\">\"{'Gdk/WindowScalingFactor': &lt;2>}\"</span>\n\nxrandr <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--output</span> DP-4-OR-WHATEVER-<span class=\"token environment constant\">DISPLAY</span>-DEVICE <span class=\"token parameter variable\">--primary</span> <span class=\"token parameter variable\">--mode</span> 3840x2160 <span class=\"token parameter variable\">--fb</span> 9000x5760 <span class=\"token parameter variable\">--rotate</span> normal  <span class=\"token parameter variable\">--scale</span> <span class=\"token number\">1</span>.5x1.5 <span class=\"token parameter variable\">--panning</span> 5760x3240+0+0 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--output</span> DP-0-OR-WHATEVER-<span class=\"token environment constant\">DISPLAY</span>-DEVICE <span class=\"token parameter variable\">--mode</span> 3840x2160 <span class=\"token parameter variable\">--fb</span> 9000x5760 --right-of DP-4 <span class=\"token parameter variable\">--scale</span> <span class=\"token number\">1</span>.5x1.5 <span class=\"token parameter variable\">--panning</span> 3240x5760+5760+0 <span class=\"token parameter variable\">--rotate</span> right</code></pre></div>\n<h1>Background</h1>\n<p>GNOME 3.32 (Since Ubuntu 19.04) introduced fractional scaling. I have been happily using it but it broke in Ubuntu 20.04 for NVIDIA cards and <a href=\"https://bugs.launchpad.net/ubuntu/+source/mutter/+bug/1873403\">a fix is not in the horizon</a>. (What's new, really...)</p>\n<p>So, let's go back to how we do fractional scaling pre-3.32: via xrandr scaling hacks. I believe the implementation of fractional scaling in GNOME 3.32 uses a similar technique, but I've not followed the development closely to say for sure.</p>\n<p>Scaling calculation is a bit tricky because we have to deal with GNOME scaling + xrandr scaling.</p>\n<h1>Main Idea</h1>\n<ol>\n<li>We scale everything to 200% in GNOME.</li>\n<li>We then up-res everything to 200% of the PERCEIVED resolution that we want (more on that later)</li>\n<li>We then scale everything back down to the PHYSICAL resolution of our monitors, this time via xrandr.</li>\n</ol>\n<p>This is actually a pretty common approach. <a href=\"https://medium.com/elementaryos/top-3-misconceptions-about-hidpi-f5ef493d7bf8\">Apple does a similar strategy</a>.</p>\n<p>Note that we're optimizing for display quality here, this might be a problem if your hardware is not powerful enough. You might need to tweak the calculations to avoid integer scaling of 200%.</p>\n<h2>Terminology - or how to think about stuff</h2>\n<p>I like to categorize resolutions to 3 types:</p>\n<ol>\n<li>Physical Resolution\nThis is the actual resolution of your monitor.</li>\n<li>Virtual Resolution\nThis is the resolution that your graphics card/OS actually renders. For example, you can render with a virtual resolution of <code class=\"language-text\">3840x2160</code> (4k) and display it onto your monitor with only <code class=\"language-text\">1920x1080</code> (physical resolution) pixels. Or vice versa.</li>\n<li>Perceived Resolution\nThis is the trickiest one. I sometimes like to think of this as IMAGINARY resolution. This is the resolution that you <strong><em>perceive</em></strong> given how the size of the UI looks to you.<br>\n<br>\nFor example, if you have a <code class=\"language-text\">3840x2160</code> monitor and you are also rendering at <code class=\"language-text\">3840x2160</code> (physical resolution == virtual resolution), and you set a scaling factor of 2, the UI will look 2x bigger. More importantly, the size of the UI <strong>will be the same as on a 1920x1080 monitor rendering at 1920x1080</strong>. In other words, on a <code class=\"language-text\">3840x2160</code> monitor with a scaling factor of 2, the <strong><em>perceived resolution</em></strong> is <code class=\"language-text\">1920x1080</code>.</li>\n</ol>\n<p>Now, let's move on to explanations for each step.</p>\n<h2>1 - Scale Everything to 200% in GNOME.</h2>\n<p>The important point in here is that we scale everything just to the step where things look too large. If 200% is still too small, you'll need to scale to 300% etc and adjust accordingly.</p>\n<p>After doing this, our resolutions are:<br>\nPhysical: <code class=\"language-text\">3840x2160</code> (never changes)<br>\nVirtual : <code class=\"language-text\">3840x2160</code><br>\nPerceived: <strong><code class=\"language-text\">1920x1080</code></strong></p>\n<h2>2 - Calculate our desired perceived resolution, up-res it 2x to get our virtual resolution</h2>\n<p>1920x1080 is too low of a resolution (remember, we're working with perceived resolution here). So think, with your monitor size, what <em>native</em> resolution will look good on it? For example, 2560x1440 is a popular choice for 27\" monitor.</p>\n<p><code class=\"language-text\">2560 / 1920 = 1.333...</code>. You can certainly use a ratio of <code class=\"language-text\">1.3333</code>, but to make our calculations simpler, let's settle for a ratio of 1.5. Thus, <code class=\"language-text\">1920 * 1.5 = 2880</code> and <code class=\"language-text\">1080 * 1.5 = 1620</code>. (Note: If you have a GNOME scaling factor of 2, this calculation is enough. But if you have a different scale factor, then you'll need to make sure the factor you choose can 'scale back' to the physical resolution).</p>\n<p>Our goal now is to make our monitor look like it has a resolution of <code class=\"language-text\">2880x1620</code> (i.e. perceived resolution), but with the <em>fidelity</em> and <em>crispness</em> of a 4k display. To preserve the crispness, we will increase the number of pixels (in each direction) we render by 2x, i.e. <code class=\"language-text\">5760x3240</code></p>\n<p>Thus, our calculated resolutions should be:<br>\nPhysical: <code class=\"language-text\">3840x2160</code> (never changes)<br>\nVirtual : <strong><code class=\"language-text\">5760x3240</code></strong><br>\nPerceived: <strong><code class=\"language-text\">2880x1620</code></strong></p>\n<p>***Small Note:*** This means that even though we're only using a 4k monitor, we're actually rendering more resolution than if we had a 5k (<code class=\"language-text\">5120x2880</code>) monitor! It's advantageous to have a monitor where its resolution is just doubled (per-side) of its usual (non-scaled) comfortable native resolution for you.<br>\ne.g. if <code class=\"language-text\">2560x1440</code> without scaling looks good on a 27\" monitor for you, the best 'high dpi' resolution will be <code class=\"language-text\">5120x2880</code>. If <code class=\"language-text\">1920x1080</code> looks good on a 24\" monitor for you, then <code class=\"language-text\">3840x2160</code> (4k) is the best.<br>\nIn this case, it also means we don't have to spend computer resources to scale the resolution back down to the physical resolution.</p>\n<h2>3 - Scale Everything Back to The Physical Resolution</h2>\n<p>To set the <code class=\"language-text\">--scale</code> property in <code class=\"language-text\">xrandr</code> correctly, we need to figure out how to scale our <strong>virtual</strong> resolution back into our <strong>physical</strong> resolution. Since we've already done our math above, it's just a matter of dividing: <code class=\"language-text\">virtual / physical</code>. e.g. <code class=\"language-text\">5760 / 3840 = 1.5</code></p>\n<p>Thus, our scale factor is <code class=\"language-text\">1.5</code>. In fact, if we chose a GNOME scaling factor of 2, then our scale factor will always be the same as the ratio we chose above because... math.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> gnome_scale_factor <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This may change, depending on user.</span>\n<span class=\"token keyword\">let</span> up_res_factor <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This is constant. 2x is almost always enough for crisp images.</span>\n\n\n<span class=\"token keyword\">let</span> virtual_res <span class=\"token operator\">=</span>  <span class=\"token punctuation\">(</span>physical_res <span class=\"token operator\">/</span> gnome_scale_factor<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> scale_ratio  <span class=\"token operator\">*</span> up_res_factor<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> xrandr_scale_factor <span class=\"token operator\">=</span> virtual_res <span class=\"token operator\">/</span> physical_res<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>virtual_res<span class=\"token punctuation\">,</span> physical_res <span class=\"token operator\">*</span> scale_ratio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>virtual_res <span class=\"token operator\">/</span> physical_res<span class=\"token punctuation\">,</span> scale_ratio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>xrandr_scale_factor<span class=\"token punctuation\">,</span> scale_ratio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We can't count on it if we have a different scaling factor though.</p>\n<p>Note that <code class=\"language-text\">xrandr</code>'s concept of 'scale' is inverse of GNOME's concept of scale! <code class=\"language-text\">xrandr</code> scales <strong><em>resolution</em></strong> <strong>down</strong> (e.g. <code class=\"language-text\">5760 / 1.5 = 3840</code>) while GNOME scales <strong><em>UI elements</em></strong> <strong>up</strong> (i.e. icons will look 2x bigger). It may be tempting to think of GNOME scaling as scaling the resolution down, e.g. <code class=\"language-text\">3840 / 2 = 1920</code>, but as we've seen in the previous section, it's not true because the virtual resolution did not change!</p>\n<p>So let's put things together in the <code class=\"language-text\">xrandr</code> command now.</p>\n<h2>Putting Everything In An <code class=\"language-text\">xrandr</code> Command - Single Display</h2>\n<p>Let's look at the single display case: <br>\n(Note that a lot of these arguments are not necessary in the single display case, as <code class=\"language-text\">--auto</code> can infer the correct value for you. You just need to supply <code class=\"language-text\">--output</code> and <code class=\"language-text\">--scale</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">xrandr <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--output</span> DP-4-OR-WHATEVER-<span class=\"token environment constant\">DISPLAY</span>-DEVICE <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--primary</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--rotate</span> normal <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--mode</span> 3840x2160 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--fb</span> 5760x3240   <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--scale</span> <span class=\"token number\">1</span>.5x1.5 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--panning</span> 5760x3240+0+0 <span class=\"token punctuation\">\\</span></code></pre></div>\n<p><code class=\"language-text\">--output</code>: The device id of your monitor, you can get them by looking at the output of <code class=\"language-text\">xrandr -q</code><br>\n<code class=\"language-text\">--primary</code>: Set this as your primary display, redundant for single display.<br>\n<code class=\"language-text\">--rotate normal</code>: Set your display's rotation. Normal in this case. You can do <code class=\"language-text\">left</code> <code class=\"language-text\">right</code> etc.<br>\n<code class=\"language-text\">--mode</code>: This is the <strong>physical resolution</strong> of your display.<br>\n<code class=\"language-text\">--fb</code>: This is the <strong>virtual resolution</strong> we have talked about.<br>\n<code class=\"language-text\">--scale</code>: This is the denominator needed to bring the virtual resolution down to the physical resolution, as explained earlier.<br>\n<code class=\"language-text\">--panning</code>: For a single display, this is usually redundant. This is the virtual resolution 'taken up' by the display, plus any shift needed (starting from the top-left).</p>\n<h2>Putting Everything In An <code class=\"language-text\">xrandr</code> Command - Multiple Display</h2>\n<p>This is where things get interesting.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">xrandr <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--output</span> DP-4-OR-WHATEVER-<span class=\"token environment constant\">DISPLAY</span>-DEVICE <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--primary</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--mode</span> 3840x2160 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--fb</span> 9000x5760 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--rotate</span> normal <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--scale</span> <span class=\"token number\">1</span>.5x1.5 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--panning</span> 5760x3240+0+0 <span class=\"token punctuation\">\\</span>\n<span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--output</span> DP-4-OR-WHATEVER-<span class=\"token environment constant\">DISPLAY</span>-DEVICE <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--rotate</span> right <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--mode</span> 3840x2160 <span class=\"token punctuation\">\\</span>\n  --right-of DP-4-OR-WHATEVER-<span class=\"token environment constant\">DISPLAY</span>-DEVICE <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--fb</span> 9000x5760   <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--scale</span> <span class=\"token number\">1</span>.5x1.5 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--panning</span> 3240x5760+5760+0 <span class=\"token punctuation\">\\</span></code></pre></div>\n<p>Now we have 2 displays, 1 primary and another secondary on the right. Let's look at the interesting new arguments:</p>\n<p>First, the physical arrangement of the display:<br>\n<code class=\"language-text\">--rotate right</code>: Self-explanatory, it's a display in portrait mode, rotated right.<br>\n<code class=\"language-text\">--right-of DP-4-OR-WHATEVER-DISPLAY-DEVICE</code>: This display is to the right of the other monitor.</p>\n<p>Here's how it looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> ---------------  -------\n |  Display 1  |  |  2  |\n |             |  |     |\n ---------------  |     |\n                  |     |\n                  -------</code></pre></div>\n<p><code class=\"language-text\">--fb 9000x5760</code>: This is a little interesting, it's actually the <strong>virtual resolution of both displays combined</strong>, in a rectangle.<br>\nSince the horizontal virtual resolution of Display 1 is 5760, and the horizontal virtual resolution of Display 2 is 3240, thus the total horizontal resolution is <code class=\"language-text\">5760 + 3240 = 9000</code>.<br>\nFor the vertical resolution, it is bounded by Display 2's vertical resolution of <code class=\"language-text\">5760</code>.<br>\n<br>\nNote that we set the same <code class=\"language-text\">fb</code> value for both displays. Note also that this value highly depends on how you arrange your monitors.</p>\n<p><code class=\"language-text\">--panning</code>: In Display 2's case, we need to <strong><em>shift</em></strong> our display rightward, by the number of horizontal virtual pixels of Display 1, <code class=\"language-text\">5760</code> in this case. Note this also depends on how you arrange your monitors.</p>","frontmatter":{"title":"How To Fix Fractional Scaling In Linux - Or, How To Be Good At xrandr","date":"2020-05-25"}}},"pageContext":{"slug":"/entry/how-to-xrandr"}},"staticQueryHashes":["3649515864"],"slicesMap":{}}